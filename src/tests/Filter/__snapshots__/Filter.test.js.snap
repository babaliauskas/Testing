// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Filter should render properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Filter
    handleSortPizzas={[MockFunction]}
    pizzas={
      Array [
        "Sausage",
        "Cheese",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <FilterInput
          filter=""
          handleFilter={[Function]}
          handleSortPizzas={[MockFunction]}
        />,
        <ul>
          <Pizza
            filteredPizzas={
              Array [
                "Sausage",
                "Cheese",
              ]
            }
          />
        </ul>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "filter": "",
          "handleFilter": [Function],
          "handleSortPizzas": [MockFunction],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Pizza
            filteredPizzas={
              Array [
                "Sausage",
                "Cheese",
              ]
            }
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "filteredPizzas": Array [
              "Sausage",
              "Cheese",
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "ul",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <FilterInput
            filter=""
            handleFilter={[Function]}
            handleSortPizzas={[MockFunction]}
          />,
          <ul>
            <Pizza
              filteredPizzas={
                Array [
                  "Sausage",
                  "Cheese",
                ]
              }
            />
          </ul>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "filter": "",
            "handleFilter": [Function],
            "handleSortPizzas": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Pizza
              filteredPizzas={
                Array [
                  "Sausage",
                  "Cheese",
                ]
              }
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "filteredPizzas": Array [
                "Sausage",
                "Cheese",
              ],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "ul",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
